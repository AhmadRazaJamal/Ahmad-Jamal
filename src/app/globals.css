@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
    font-family: 'ManropeRegular';
    src: url('/fonts/Manrope/static/Manrope-Regular.ttf');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'ManropeBold';
    src: url('/fonts/Manrope/static/Manrope-Bold.ttf');
    font-weight: bold;
    font-style: normal;
}

@import "~react-image-gallery/styles/css/image-gallery.css";

/* Global CSS  */

:root {
    --light-cyan: #d6fff6ff;
    --medium-turquoise: #4dccbdff;
    --russian-violet: #110d31ff;
    --face-color: #1E90FF;
    --size: 80px;
    --animation-duration: 2s;
}

* {
    font-family: 'ManropeRegular';
    font-size: inherit;
    margin: 0;
    padding: 0;
}

h2 {
    font-family: 'ManropeRegular';
}

html, body, #__next {
    height: 100%;
    width: 100%;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
}

.scene {
    position: relative;
    perspective: 1000px;
    z-index: 2;
    height: calc(var(--size) * 2.75);
    width: calc(var(--size) * 2.75);
    display: grid;
    place-items: center;
}

.cube-wrapper {
    transform-style: preserve-3d;
    animation: bouncing var(--animation-duration) infinite;
}

.cube {
    transform-style: preserve-3d;
    transform: rotateX(45deg) rotateZ(45deg);
    animation: rotation var(--animation-duration) infinite;
}

.cube-faces {
    transform-style: preserve-3d;
    height: var(--size);
    width: var(--size);
    position: relative;
    transform-origin: 0 0;
    transform: translateX(0) translateY(0) translateZ(calc(-1 * var(--size) / 2));
}

.cube-face {
    position: absolute;
    inset: 0;
    background: var(--face-color);
}

.cube-face.shadow {
    transform: translateZ(calc(-1 * var(--size)));
    animation: bouncing-shadow var(--animation-duration) infinite;
}

.face-top {
    transform: translateZ(var(--size));
}

.face-front {
    transform-origin: 0 50%;
    transform: rotateY(-90deg);
}

.face-back {
    transform-origin: 0 50%;
    transform: rotateY(-90deg) translateZ(calc(-1 * var(--size)));
}

.face-right {
    transform-origin: 50% 0;
    transform: rotateX(-90deg) translateY(calc(-1 * var(--size)));
}

.face-left {
    transform-origin: 50% 0;
    transform: rotateX(-90deg) translateY(calc(-1 * var(--size))) translateZ(var(--size));
}

/* Cube Animation */

@keyframes rotation {
    0% {
        transform: rotateX(45deg) rotateY(0) rotateZ(45deg);
        animation-timing-function: cubic-bezier(0.17, 0.84, 0.44, 1);
    }
    50% {
        transform: rotateX(45deg) rotateY(0) rotateZ(225deg);
        animation-timing-function: cubic-bezier(0.76, 0.05, 0.86, 0.06);
    }
    100% {
        transform: rotateX(45deg) rotateY(0) rotateZ(405deg);
        animation-timing-function: cubic-bezier(0.17, 0.84, 0.44, 1);
    }
}

@keyframes bouncing {
    0% {
        transform: translateY(calc(-1 * var(--size) * 0.5));
        animation-timing-function: cubic-bezier(0.76, 0.05, 0.86, 0.06);
    }
    45% {
        transform: translateY(calc(var(--size) * 0.5));
        animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
    }
    100% {
        transform: translateY(calc(-1 * var(--size) * 0.5));
        animation-timing-function: cubic-bezier(0.76, 0.05, 0.86, 0.06);
    }
}

@keyframes bouncing-shadow {
    0% {
        transform: translateZ(calc(-1 * var(--size))) scale(1.3);
        animation-timing-function: cubic-bezier(0.76, 0.05, 0.86, 0.06);
        opacity: .05;
    }
    45% {
        transform: translateZ(0);
        animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
        opacity: .3;
    }
    100% {
        transform: translateZ(calc(-1 * var(--size))) scale(1.3);
        animation-timing-function: cubic-bezier(0.76, 0.05, 0.86, 0.06);
        opacity: .05;
    }
}

/* Waving animation */

@keyframes wave-animation {
    0% {
        transform: rotate( 0.0deg)
    }
    10% {
        transform: rotate(14.0deg)
    }
    20% {
        transform: rotate(-8.0deg)
    }
    30% {
        transform: rotate(14.0deg)
    }
    40% {
        transform: rotate(-4.0deg)
    }
    50% {
        transform: rotate(10.0deg)
    }
    60% {
        transform: rotate( 0.0deg)
    }
    100% {
        transform: rotate( 0.0deg)
    }
}
